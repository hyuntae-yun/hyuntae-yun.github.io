---
layout: post
title:  "None rotating body Time Series Analysis Methodology"
date:   2022-08-04 11:47:55 +0300
image:  time-series.png
tags:   time series,analysis
---



벌써 이 프로젝트를 시작한 지 1년이 다 되어간다. 첫회사, 첫직장, 첫 업무라서 떨리고 설레는 마음으로 시작했는데, 1년이 지나고 돌이켜보니 시행착오도 참 많았고 재미있었던 것도, 힘들었던 것도 많았던 것 같다. 그 중에서도 날 가장 괴롭힌 것은 '비 회전체 시계열 데이터 분석 방법론' 이었다. 많은 Research를 해본 결과 나는 어느정도 가이드 라인을 세울 수 있었다. 당연히, 시계열을 처음 해보는 거고 나보다 공부를 많이 했던 사람도 많을테니 태클은 언제나 환영이다.



# 1. 데이터의 특징 파악하기

## 시계열 데이터란?

시계열 데이터라고 함은 말 그대로 데이터에 시계열이 무조건 포함되는 것이며, 따라서 항상 순서, 혹은 시간에 영향을 받습니다. 순서나 시간에 영향을 받는다는 것은 굉장히 커다란 이슈인데, 예를 들어 내가 실외 온도를 관측한다고 했을 때, 오후 1시에 관측한 35도와  새벽 5시에 관측한 35도는 완전히 다른 얘기입니다. 오후 1시에는 35도를 관측하는 것이 정상일 수 있지만, 새벽 5시에는 특별한 일이 발생되지 않고서는 35도를 넘기 힘들기 때문입니다. 

## 주기(cycle)


 1. 시계열 데이터는 연속성을 가지고 있기 때문에 주기를 아는 것이 굉장히 중요하다
 2. 회전체는 주기를 쉽게 특정할 수 있지만 비회전체는 주기를 특정하는 것이 어렵다.
 3. 주기를 정하는 것은 데이터 전처리(feature extracting, data smoothing)등에 영향을 미친다.


 시계열 데이터를 분석할 때 가장 먼저 파악하는 것이 바로 주기 입니다. 시간과 데이터 값의 변동이 밀접한 관련이 있기 때문에 주기를 파악하지 않으면 제대로 된 시계열 데이터를 분석할 수 없습니다.  
 
 회전체 설비를 예로 들면, 회전체는 주기가 항상 정해져 있습니다. 보통 rpm(Rounds per minute)이라고 하는데, 분당 몇번 회전하는 지를 본다는 것은 반대로 말하자면 1분당 rpm의 크기만큼 반복되는 동작을 하고 있다는 이야기 입니다. 즉, 회전체의 주기는 굉장히 짧고 주기를 정의하기도 쉽습니다. 그래서 보통 회전체를 분석하는 것은 rpm을 1x로 두고 FFT를 통해 주파수 분해를 하거나, 1/rpm만큼의 데이터를 정상 데이터로 보고 분석하는 것이 일반적 입니다. 주기도 알고, 데이터도 짧은 시간 안에 많이 얻을 수 있으니 손쉽게 분석이 가능합니다.
 비회전체는 다릅니다. 비회전체가 더 많은 부분을 차지하고 있음에도 불구하고 회전체에만 적용할 수 있는 방법들이 많은 것은 그만큼 비회전체에 대한 접근이 어렵다는 것을 뜻하며, 비회전체의 주기를 설정하는 것에도 문제가 있습니다. 예를 들어 산업 현장에서 어떤 기계의 데이터를 수집한다고 했을 때, 물론 주기가 정해져 있는 것도 있지만 대부분의 기계는 그렇지 않습니다. 똑같은 제품을 계속해서 생산해낸다면 거기에서 주기성을 찾을 수 있지만 일반적으로는 그때그때 다른 제품을 생산하기 때문에 MES 데이터(ex. 제품에 대한 전반적인 정보) 없이 데이터만으로는 주기를 특정하기가 쉽지 않습니다. 즉, 언제가 시작이고 끝인지를 설정하는 것 부터가 데이터 분석의 시작이라고 할 수 있습니다.
 
 주기가 중요한 이유는 또 있습니다. 데이터 수집에 대한 rpm, 혹은 hz 값이 올라가게 되면 데이터의 수도 기하급수적으로 많아지고, 너무 미세한 움직임까지 포착되다 보니 데이터의 과잉으로 잘못된 분석(주로 overfiting)을 할 수도 있습니다. 이럴 때는 feature extracting(fft, wavelet, AutoEncoder), 혹은 data smoothing(Moving Average, lowess)과 같은 기법을 사용해 데이터의 수를 줄여주면서 데이터의 특징들만을 추출할 수도 있습니다. 데이터 수집에 대한 hz가 낮아도 주기가 굉장히 길다면 동일한 문제가 발생합니다. 1hz, 그러니까 1초에 하나씩 데이터를 수집한다고 해도 주기가 하루이면 단순 계산으로 한주기에 86400만큼의 데이터 수가 존재하게 됩니다. 
 
 물론 가장 좋은 것은 최대한 많은 데이터를 전처리 기법에 적용시키는 것이지만, 시간 및 물리적인 한계로 인해 적절히 타협을 해야할 것 입니다.
 
 
 
 ## 



[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
